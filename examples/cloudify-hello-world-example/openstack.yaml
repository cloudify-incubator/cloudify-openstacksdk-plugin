tosca_definitions_version: cloudify_dsl_1_3

imports:
  - http://www.getcloudify.org/spec/cloudify/4.5.dev1/types.yaml
  - plugin:cloudify-openstack-plugin
  - install-script.yaml

inputs:

  region:
    type: string
    description: The Openstack region.

  user_domain_id:
    type: string
    default: default

  external_network_name:
    type: string
    description: A network that provisions floating IPs.

  image:
    type: string
    description: The UUID of an Ubuntu Trusty 14.04 image in your Openstack account.

  flavor:
    type: string
    description: The UUID of small flavor in your Openstack account.

  network_id:
    type: string
    description: A name for your new Openstack Network.
    default: cloudify-hello-world-network

  subnet_id:
    type: string
    description: A name for your new Openstack Subnet.
    default: cloudify-hello-world-subnet


dsl_definitions:

  client_config: &client_config
    auth_url: { get_secret: auth_url }
    username: { get_secret: username }
    password: { get_secret: password }
    project_name: { get_secret: project_name }
    region_name: { get_input: region }
    user_domain_id: { get_input: user_domain_id }

node_templates:

  vm:
    type: cloudify.nodes.openstack.Server
    properties:
      client_config: *client_config
      agent_config:
        install_method: none
      resource_config:
        key_name: ''
        name: { concat: [ { get_input: name_prefix }, '_server' ] }
        image_id: { get_input: image }
        flavor_id: { get_input: flavor }
      management_network_name: ''
    relationships:
    - type: cloudify.relationships.openstack.server_connected_to_port
      target: port

  port:
    type: cloudify.nodes.openstack.Port
    properties:
      client_config: *client_config
        network_id: { get_attribute: [ network, id ] }
        fixed_ips:
          - subnet_id: { get_attribute: [ subnet, id ] }
        security_groups:
          - { get_attribute: [ security_group, id ] }
    relationships:
    - type: cloudify.relationships.contained_in
      target: network
    - type: cloudify.relationships.depends_on
      target: subnet
    - type: cloudify.relationships.connected_to
      target: security_group
    - type: cloudify.relationships.openstack.port_connected_to_floating_ip
      target: ip

  subnet:
    type: cloudify.nodes.openstack.Subnet
    properties:
      client_config: *client_config
      resource_config:
        name: { get_input: subnet_id }
        ip_version: 4
        cidr: 10.10.4.0/24
        dns_nameservers: [8.8.4.4, 8.8.8.8]
        allocation_pools:
          - start: 10.10.4.2
            end: 10.10.4.254
    relationships:
    - type: cloudify.relationships.contained_in
      target: network
    - type: cloudify.relationships.openstack.subnet_connected_to_router
      target: router

  network:
    type: cloudify.nodes.openstack.Network
    properties:
      client_config: *client_config
      resource_config:
        name: { get_input: network_id }

  router:
    type: cloudify.nodes.openstack.Router
    properties:
      client_config: *client_config
      resource_config:
        kwargs:
          external_gateway_info:
            network_id: { get_input: external_network_name }

  security_group:
    type: cloudify.nodes.openstack.SecurityGroup
    properties:
      client_config: *client_config
      resource_config:
        description: 'A security group created by Cloudify OpenStack SDK plugin.'

  security_group_rule:
    type: cloudify.nodes.openstack.SecurityGroupRule
    properties:
      client_config: *client_config
      resource_config:
        remote_ip_prefix: 0.0.0.0/0
        port_range_max: 80
        port_range_min: 80
        direction: ingress
        protocol: tcp
        security_group_id: { get_attribute: [ security_group, id ] }
    relationships:
      - type: cloudify.relationships.contained_in
        target: security_group
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            resource_config: { get_property: [ SELF, resource_config ] }

  ip:
    type: cloudify.nodes.openstack.FloatingIP
    properties:
      client_config: *client_config
      resource_config:
        floating_network_id: { get_input: external_network_name }

outputs:

  application_endpoint:
    description: The external endpoint of the application.
    value: { concat: [ 'http://', { get_attribute: [ ip, floating_ip_address ] }, ':80' ] }
