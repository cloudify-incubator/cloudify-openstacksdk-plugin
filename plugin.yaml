plugins:

  openstacksdk:
    executor: central_deployment_agent
    source: https://github.com/cloudify-incubator/cloudify-openstacksdk-plugin/archive/master.zip
    package_name: cloudify-openstacksdk-plugin
    package_version: '1.0.0'

dsl_definitions:

  # Every resource uses this property unless noted.
  client_config: &client_config
    client_config:
      type: cloudify.types.openstack.ClientConfig
      description: Your OpenStack client configuration.
      required: true

  # Every resource uses this property unless noted.
  external_resource: &external_resource
    use_external_resource:
      description: Indicate whether the resource exists or if Cloudify should create the resource, true if you are bringing an existing resource, false if you want cloudify to create it.
      type: boolean
      default: false

  # Every resource uses this property unless noted.
  resource_id: &resource_id
    resource_id:
      description: The Openstack resource ID of the external resource, if use_external_resource is true. Otherwise it is an empty string.
      type: string
      default: ''

  base_operation_inputs: &base_operation_inputs
    <<: *client_config
    resource_id:
      description: This overrides the resource_id property (useful for setting the resource ID of a node instance at runtime).
      type: string
      required: false
      default: ~
    runtime_properties:
      description: >
        This overrides any runtime property at runtime. This is a key-value pair / dictionary that will be passed, as-is, to the runtime properties of the running instance.
      required: false
      default: ~

    kwargs: &data_type_kwargs
      kwargs:
        description: A dictionary of keys and values that is not validated but will override other values in the resource config.
        default: {}

    name: &data_type_name
      name:
        description: Resource name.
        type: string
        required: true

    description: &data_type_description
      description:
        description: Resource description.
        type: string
        required: false

data_types:

  cloudify.types.openstack.client_config:
    # See: https://docs.openstack.org/python-openstackclient/pike/cli/man/openstack.html.
    properties:
      auth_url:
        type: string
        description: Your OpenStack Client Authorization URL.
        required: true
      username:
        type: string
        description: Your OpenStack username.
        required: true
      password:
        type: string
        description: Your OpenStack password.
        required: true
      project_name:
        type: string
        description: The name of your OpenStack project.
        required: false
      region_name:
        type: string
        description: The region where you want this particular resource to be created.
        required: false

  cloudify.types.openstack.Network:
    properties:
      <<: *data_type_kwargs
      <<: *data_type_name
      <<: *data_type_description
      admin_state_up:
        description: The administrative state of the network, which is up (true) or down (false).
        type: boolean
        required: false
      availability_zone_hints :
        description: Availability zone hints to use when scheduling the network. Type: list of availability zone names.
        required: false
      availability_zones :
        description: Availability zones for the network. Type: list of availability zone names.
        required: false
      dns_domain:
        description: A valid DNS domain.
        type: string
        required: false
      mtu:
        description: The maximum transmission unit (MTU) value to address fragmentation. Minimum value is 68 for IPv4, and 1280 for IPv6.
        type: number
        required: false
      port_security_enabled:
        description: The port security status of the network. Valid values are enabled (true) and disabled (false). This value is used as the default value of port_security_enabled field of a newly created port.
        type: boolean
        required: false
      provider:
        description: >
          A dictionary with the following keys:
            - network_type: string. The type of physical network that this network should be mapped to. For example, flat, vlan, vxlan, or gre. Valid values depend on a networking back-end.
            - physical_network: string. The physical network where this network should be implemented. The Networking API v2.0 does not provide a way to list available physical networks. For example, the Open vSwitch plug-in configuration file defines a symbolic name that maps to specific bridges on each compute host.
            - segmentation_id: integer. The ID of the isolated segment on the physical network. The network_type attribute defines the segmentation model. For example, if the network_type value is vlan, this ID is a vlan identifier. If the network_type value is gre, this ID is a gre key.
      qos_policy_id:
        description: The ID of the QoS policy associated with the network.
        type: string
        required: false
      router:
        description: >
          A dictionary with the following keys:
            - external: boolean. Indicates whether the network has an external routing facility thatâ€™s not managed by the networking service.
      segments:
        description: A list of provider segment objects.
        required: false
      shared:
        description: Indicates whether this network is shared across all tenants. By default, only administrative users can change this value.
        type: boolean
        required: false
      tenant_id:
        description: The ID of the project that owns the resource. Only administrative and users with advsvc role can specify a project ID other than their own. You cannot change this value through authorization policies.
        type: string
        required: false
      vlan_transparent:
        description: Indicates the VLAN transparency mode of the network, which is VLAN transparent (true) or not VLAN transparent (false).
        type: boolean
        required: false
      is_default:
        description: The network is default or not.
        type: boolean
        required: false

  # Note that the OpenStack API object specifies Subnets, a list of subnet.
  # This data type refers to a member of that list.
  cloudify.types.openstack.Subnet:
    properties:
      <<: *data_type_kwargs
      <<: *data_type_name
      <<: *data_type_description
      enable_dhcp:
        description: Indicates whether dhcp is enabled or disabled for the subnet. Default is true.
        type: boolean
        required: false
      network_id:
        description: The ID of the network to which the subnet belongs.
        type: string
        required: false
      dns_nameservers:
        description: List of dns name servers associated with the subnet. Default is an empty list.
        required: false
      allocation_pools:
        description: Allocation pools with start and end IP addresses for this subnet. If allocation_pools are not specified, OpenStack Networking automatically allocates pools for covering all IP addresses in the CIDR, excluding the address reserved for the subnet gateway by default.
        required: false
      host_routes:
        description: Additional routes for the subnet. A list of dictionaries with destination and nexthop parameters. Default value is an empty list.
        required: false
      ip_version:
        description: The IP protocol version. Value is 4 or 6.
        type: string
        required: false
      gateway_ip:
        description: Gateway IP of this subnet. If the value is null that implies no gateway is associated with the subnet. If the gateway_ip is not specified, OpenStack Networking allocates an address from the CIDR for the gateway for the subnet by default.
        type: string
        required: false
      cidr:
        description: The CIDR of the subnet.
        type: string
        required: false.
      prefixlen:
        description: The prefix length to use for subnet allocation from a subnet pool. If not specified, the default_prefixlen value of the subnet pool will be used.
        type: number
        required: false
      ipv6_address_mode:
        description: The IPv6 address modes specifies mechanisms for assigning IP addresses. Value is slaac, dhcpv6-stateful, dhcpv6-stateless.
        type: string
        required: false
      ipv6_ra_mode:
        description: The IPv6 router advertisement specifies whether the networking service should transmit ICMPv6 packets, for a subnet. Value is slaac, dhcpv6-stateful, dhcpv6-stateless.
        type: string
        required: false
      segment_id:
        description: The ID of a network segment the subnet is associated with. It is available when segment extension is enabled.
        type: string
        required: false
      subnetpool_id:
        description: The ID of the subnet pool associated with the subnet.
        type: string
        required: false
      use_default_subnetpool:
        description: Whether to allocate this subnet from the default subnet pool.
        type: boolean
        required: false
      service_types:
        description: The service types associated with the subnet.
        required: false

  cloudify.types.openstack.Server:
    properties:
      <<: *data_type_kwargs
      <<: *data_type_name
      imageRef:
        description: >
	      The UUID of the image to use for your server instance.
	      This is not required in case of boot from volume.
	      In all other cases it is required
	      and must be a valid UUID otherwise API will return 400
        required: false
        type: string
      flavorRef:
        description: >
         The flavor reference, as an ID (including a UUID) or
         full URL, for the flavor for your server instance.
        required: true
        type: string
      availability_zone:
        description: >
          The availability zone from which to launch the server.
          When you provision resources, you specify from which availability
          zone you want your instance to be built. Typically,
          an admin user will use availability zones to arrange
          OpenStack compute hosts into logical groups.
          An availability zone provides a form of physical isolation
          and redundancy from other availability zones.
          For instance, if some racks in your data center are
          on a separate power source, you can put servers in those racks
          in their own availability zone. Availability zones can
          also help separate different classes of hardware.
          By segregating resources into availability zones,
          you can ensure that your application resources are spread across
          disparate machines to achieve high availability
          in the event of hardware or other failure.
          You can list the available availability zones
          by calling the os-availability-zone API,
          but you should avoid using the default availability zone when
          booting the instance. In general,
          the default availability zone is named nova.
          This AZ is only shown when listing the availability zones as an admin
        required: false
        type: string
      user_data:
        description: >
          Configuration information or scripts to use upon launch.
          Must be Base64 encoded. Restricted to 65535 bytes.
        required: false
        type: string
      metadata:
        description: >
          Metadata key and value pairs.
          The maximum size of the metadata key and value is 255 bytes each.
        required: false
        default: {}
      security_groups:
        description: >
          One or more security groups.
          Specify the name of the security group in the name attribute.
          If you omit this attribute, the API creates the server
          in the default security group. Requested security groups are not
          applied to pre-existing ports
        required: false
        default: []
      key_name :
        description: >
          Key pair name.
        required: false
        type: string

  cloudify.types.openstack.ServerGroup:
    properties:
      <<: *data_type_kwargs
      <<: *data_type_name
      policies:
        description: >
          A list of exactly one policy name to associate with the server group. The current valid policy names are:
          anti-affinity - servers in this group must be scheduled to different hosts.
          affinity - servers in this group must be scheduled to the same host.
          soft-anti-affinity - servers in this group should be scheduled to different hosts if possible, but if not possible then they should still be scheduled instead of resulting in a build failure. This policy was added in microversion 2.15.
          soft-affinity - servers in this group should be scheduled to the same host if possible, but if not possible then they should still be scheduled instead of resulting in a build failure. This policy was added in microversion 2.15.
        required: true

  cloudify.types.openstack.KeyPair:
    properties:
      <<: *data_type_kwargs
      <<: *data_type_name
      public_key:
        description: >
          The public ssh key to import. If you omit this value,
          a keypair is generated for you
        required: false
        type: string

  cloudify.types.openstack.Image:
    properties:
      <<: *data_type_kwargs
      <<: *data_type_name
      container_format:
        description: >
          Format of the image container.
        required: false
        type: string
      disk_format:
        description: >
          The format of the disk.
        required: false
        type: string
      id:
        description: >
          A unique, user-defined image UUID
        required: false
        type: string
      tags:
        description: >
          List of tags for this image. Each tag is a string of at most 255 chars.
          The maximum number of tags allowed on an image is set by the operator.
        required: false
        default: []

  cloudify.types.openstack.Flavor:
    properties:
      <<: *data_type_kwargs
      <<: *data_type_name
      <<: *data_type_description
      id:
        description: >
          The ID of the flavor. While people often make this look like an int,
          this is really a string. If not provided, this defaults to a uuid.
        required: false
        type: string
      ram :
        description: >
          	The amount of RAM a flavor has, in MiB
        required: true
        type: integer
      disk :
        description: >
          The size of the root disk that will be created in GiB.
          If 0 the root disk will be set to exactly the size of the image used
          to deploy the instance. However, in this case filter scheduler cannot
          select the compute host based on the virtual image size.
          Therefore, 0 should only be used for volume booted instances or for testing purposes.
        required: true
        type: integer
      vcpus :
        description: >
          The number of virtual CPUs that will be allocated to the server.
        required: true
        type: integer


node_types:

  cloudify.nodes.openstack.NetworkBase:
    derived_from: cloudify.nodes.Network
    properties:
      <<: *client_config
      <<: *external_resource
      <<: *resource_id

  cloudify.nodes.openstack.Network:
    derived_from: cloudify.nodes.openstack.NetworkBase
    properties:
      resource_config:
        type: cloudify.types.openstack.Network
        description: A dictionary that may contain these keys: https://developer.openstack.org/api-ref/network/v2/#create-network.
        required: true
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: openstacksdk.openstacksdk_plugin.resources.network.create
        delete:
          implementation: openstacksdk.openstacksdk_plugin.resources.network.delete
          inputs: *base_operation_inputs
        update:
          implementation: openstacksdk.openstacksdk_plugin.resources.network.update
          inputs:
            <<: *base_operation_inputs
            resource_config:
              required: false
              default: { get_property: [ SELF, resource_config ] }

  cloudify.nodes.openstack.Subnet:
    derived_from: cloudify.nodes.openstack.NetworkBase
    properties:
      resource_config:
        type: cloudify.types.openstack.Subnet
        Description: A dictionary that may contain these keys: https://developer.openstack.org/api-ref/network/v2/#create-subnet. This is not a list of cloudify.types.openstack.Subnet as the OpenStack API specifies.
        required: true
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: openstacksdk.openstacksdk_plugin.resources.subnet.create
        delete:
          implementation: openstacksdk.openstacksdk_plugin.resources.subnet.delete
          inputs: *base_operation_inputs
        update:
          implementation: openstacksdk.openstacksdk_plugin.resources.subnet.update
          inputs:
            <<: *base_operation_inputs
            resource_config:
              required: false
              default: { get_property: [ SELF, resource_config ] }

  cloudify.nodes.openstack.Server:
    derived_from: cloudify.nodes.Compute
    properties:
      <<: *client_config
      <<: *external_resource
      <<: *resource_id
      resource_config:
        type: cloudify.types.openstack.Server
        description: A dictionary that may contain these keys: https://developer.openstack.org/api-ref/compute/?expanded=create-server-detail
        required: true
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: openstacksdk.openstacksdk_plugin.resources.compute.server.create
        start:
          implementation: openstacksdk.openstacksdk_plugin.resources.compute.server.start
        stop:
          implementation: openstacksdk.openstacksdk_plugin.resources.compute.server.stop
        delete:
          implementation: openstacksdk.openstacksdk_plugin.resources.compute.server.delete
        update:
          implementation: openstacksdk.openstacksdk_plugin.resources.compute.server.update

  cloudify.nodes.openstack.WindowsServer:
    derived_from: cloudify.nodes.openstack.Server
    properties:
      use_password:
        type: boolean
        default: true
        description: >
          Default changed for derived type
          because Windows instances need a password for agent installation
      os_family:
        type: string
        default: windows
        description: >
          (updates the os_family default as a convenience)
      agent_config:
        type: cloudify.datatypes.AgentConfig
        default:
          port: 5985
        description: >
          (updates the defaults for the agent_config for Windows)

  cloudify.nodes.openstack.ServerGroup:
    derived_from: cloudify.nodes.Root
    properties:
      <<: *client_config
      <<: *external_resource
      <<: *resource_id
      resource_config:
        type: cloudify.types.openstack.ServerGroup
        description: https://developer.openstack.org/api-ref/compute/?expanded=create-server-detail#create-server-group
        required: true
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: openstacksdk.openstacksdk_plugin.resources.compute.server_group.create
        delete:
          implementation: openstacksdk.openstacksdk_plugin.resources.compute.server_group.delete
        update:
          implementation: openstacksdk.openstacksdk_plugin.resources.compute.server_group.update

  cloudify.nodes.openstack.KeyPair:
    derived_from: cloudify.nodes.Root
    properties:
      <<: *client_config
      <<: *external_resource
      <<: *resource_id
      resource_config:
        type: cloudify.types.openstack.KeyPair
        description: https://developer.openstack.org/api-ref/compute/?expanded=create-or-import-keypair-detail
        required: true
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: openstacksdk.openstacksdk_plugin.resources.compute.keypair.create
        delete:
          implementation: openstacksdk.openstacksdk_plugin.resources.compute.keypair.delete
        update:
          implementation: openstacksdk.openstacksdk_plugin.resources.compute.keypair.update

  cloudify.nodes.openstack.Image:
    derived_from: cloudify.nodes.Root
    properties:
      <<: *client_config
      <<: *external_resource
      <<: *resource_id
      resource_config:
        type: cloudify.types.openstack.Image
        description: https://developer.openstack.org/api-ref/image/v2/index.html?expanded=show-image-detail,create-image-detail#create-image
        required: true
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: openstacksdk.openstacksdk_plugin.resources.compute.image.create
        delete:
          implementation: openstacksdk.openstacksdk_plugin.resources.compute.image.delete
        update:
          implementation: openstacksdk.openstacksdk_plugin.resources.compute.image.update

  cloudify.nodes.openstack.Flavor:
    derived_from: cloudify.nodes.Root
    properties:
      <<: *client_config
      <<: *external_resource
      <<: *resource_id
      resource_config:
        type: cloudify.types.openstack.Flavor
        description: https://developer.openstack.org/api-ref/compute/?expanded=create-flavor-detail
        required: true
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: openstacksdk.openstacksdk_plugin.resources.compute.flavor.create
        delete:
          implementation: openstacksdk.openstacksdk_plugin.resources.compute.flavor.delete
        update:
          implementation: openstacksdk.openstacksdk_plugin.resources.compute.flavor.update